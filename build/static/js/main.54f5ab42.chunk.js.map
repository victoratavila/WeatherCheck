{"version":3,"sources":["Components/Home/styles.js","assets/rain.svg","assets/sun.svg","assets/cloudyDay.svg","assets/cloudyNight.svg","Components/Labels/DayLabel/style.js","Components/Labels/DayLabel/index.js","Components/Labels/RainLabel/style.js","Components/Labels/RainLabel/index.js","Components/Labels/NightLabel/style.js","Components/Labels/NightLabel/index.js","Components/Labels/CloudyLabel/style.js","Components/Labels/CloudyLabel/index.js","config/api.js","Components/Home/index.js","router/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["City","styled","h1","Degree","p","CurrentWheaterIcon","img","props","height","width","NextDaysWeather","div","DayOfWeek","DayOfMonth","h3","MinAndMax","h5","input","Button","button","DayLabel","RainLabel","NightLabel","CloudyLabel","api","axios","create","baseURL","Home","useState","weatherFound","setWeather","states","setStates","React","modalShow","setModalShow","key","process","getWeather","city","a","storage","localStorage","getItem","now","Date","data","JSON","parse","getTime","expiration","removeItem","get","then","results","storeResults","value","userCity","setItem","stringify","catch","err","console","log","getStatesList","list","useEffect","slugify","getUserLocalization","setFutureWeatherIcon","futureWeather","condition","RainIcon","CloudyDayIcon","SunIcon","handleChanges","ev","target","searchCity","preventDefault","selectedCity","cityNameInput","selectedState","stateSelected","undefined","MyVerticallyCenteredModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Form","onSubmit","Select","required","aria-label","onChange","map","sigla","Group","className","controlId","Control","type","placeholder","variant","temp","alt","src","currently","document","body","style","backgroundImage","condition_slug","CloudyNightIcon","setTodaysWeatherIcon","textAlign","Container","Row","Col","forecast","weekday","date","max","min","onClick","show","onHide","Routes","path","exact","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.54f5ab42.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const City = styled.h1`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 50px;\r\n    color: white;\r\n    display: inline\r\n`\r\n\r\nexport const State = styled.p`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 50px;\r\n    color: white;\r\n    display: inline;\r\n    opacity: 70%\r\n`\r\n\r\nexport const Degree = styled.h1`\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 65px;\r\n    color: white;\r\n    margin-top: 15px;\r\n`\r\n\r\nexport const CurrentWheaterIcon = styled.img`\r\n    height: ${props => props.height};\r\n    width: ${props => props.width};\r\n    margin-left: 10px\r\n`\r\nexport const NextDaysWeather = styled.div`\r\n    height: 250px;\r\n    background-color: red;\r\n    background-color: rgba(255, 255, 255, .15);  \r\n    backdrop-filter: blur(5px);\r\n    transition: box-shadow .3s;\r\n\r\n    &:hover {\r\n        box-shadow: 0 0 11px rgba(33,33,33,.2); \r\n    }\r\n`\r\nexport const DayOfWeek = styled.h1`\r\n    font-size: 30px;\r\n    color: white;\r\n`\r\n\r\nexport const DayOfMonth = styled.h3`\r\n    font-size: 20px;\r\n    color: white;\r\n    font-weight: 400;\r\n`\r\n\r\nexport const MinAndMax = styled.h5`\r\n    font-size: 13px;\r\n    color: #000000;\r\n    font-weight: 400;\r\n    margin-top: 40px;\r\n`\r\n\r\nexport const Input = styled.input`\r\n    color: white;\r\n    background: none;\r\n    border-color: white;\r\n`;","export default __webpack_public_path__ + \"static/media/rain.13cd5b50.svg\";","export default __webpack_public_path__ + \"static/media/sun.ea32b0b9.svg\";","export default __webpack_public_path__ + \"static/media/cloudyDay.2b02d8a0.svg\";","export default __webpack_public_path__ + \"static/media/cloudyNight.c92cb631.svg\";","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    width: 150px;\r\n    height: 30px;\r\n    background-color: #E0D927;\r\n    border: 0;\r\n    border-radius: 20px;\r\n    font-weight: 500;\r\n    transition: 0.3s;\r\n    \r\n    &:hover{\r\n        background-color: #FFF849;\r\n        transition: 0.3s;\r\n    }\r\n\r\n`","import React from 'react';\r\nimport { Button } from './style';\r\n\r\nconst DayLabel = () => <Button>Dia</Button>\r\n\r\nexport default DayLabel;","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    width: 150px;\r\n    height: 30px;\r\n    background-color: #226FBD;\r\n    border: 0;\r\n    border-radius: 20px;\r\n    font-weight: 500;\r\n    transition: 0.3s;\r\n    color: white;\r\n    margin-left: 15px;\r\n    \r\n    &:hover{\r\n        background-color: #0858A9;\r\n        transition: 0.3s;\r\n    }\r\n\r\n`","import React from 'react';\r\nimport { Button } from './style';\r\n\r\nconst RainLabel = () => <Button>Chuva</Button>\r\n\r\nexport default RainLabel;","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    width: 150px;\r\n    height: 30px;\r\n    background-color: #032D58;\r\n    border: 0;\r\n    border-radius: 20px;\r\n    font-weight: 500;\r\n    transition: 0.3s;\r\n    color: white;\r\n    margin-left: 15px;\r\n    \r\n    &:hover{\r\n        background-color: #011122;\r\n        transition: 0.3s;\r\n    }\r\n\r\n`","import React from 'react';\r\nimport { Button } from './style';\r\n\r\nconst NightLabel = () => <Button>Noite</Button>\r\n\r\nexport default NightLabel;","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n    width: 220px;\r\n    height: 30px;\r\n    background-color: #E9E4E4;\r\n    border: 0;\r\n    border-radius: 20px;\r\n    font-weight: 500;\r\n    transition: 0.3s;\r\n    margin-left: 15px;\r\n    \r\n    &:hover{\r\n        background-color: #FFFFFF;\r\n        transition: 0.3s;\r\n    }\r\n\r\n`","import React from 'react';\r\nimport { Button } from './style';\r\n\r\nconst CloudyLabel = () => <Button>Nublado</Button>\r\n\r\nexport default CloudyLabel;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.hgbrasil.com/weather?format=json-cors&key=df93cc48',\r\n  });\r\n\r\nexport default api;","import React, { useEffect, useState } from 'react';\r\nimport { City, Degree, CurrentWheaterIcon, NextDaysWeather, DayOfWeek, DayOfMonth, MinAndMax } from './styles';\r\nimport RainIcon from '../../assets/rain.svg';\r\nimport SunIcon from '../../assets/sun.svg';\r\nimport CloudyDayIcon from '../../assets/cloudyDay.svg';\r\nimport CloudyNightIcon from '../../assets/cloudyNight.svg'\r\nimport DayLabel from '../../Components/Labels/DayLabel';\r\nimport RainLabel from '../../Components/Labels/RainLabel';\r\nimport NightLabel from '../../Components/Labels/NightLabel';\r\nimport CloudyLabel from '../../Components/Labels/CloudyLabel';\r\nimport {Container, Row, Col, Form, Modal, Button} from 'react-bootstrap';\r\nimport api from '../../config/api';\r\nimport axios from 'axios';\r\nimport slugify from 'react-slugify';\r\n\r\nconst Home = () => {\r\n\r\n    const [ weatherFound, setWeather ] = useState(null);\r\n    const [ states, setStates ] = useState(null);\r\n    const [ modalShow, setModalShow ] = React.useState(false);\r\n\r\n    const key = process.env.REACT_APP_API_KEY;\r\n\r\n\r\n    const getWeather = async (city) => {\r\n\r\n        const storage = localStorage.getItem('weatherResults');\r\n        const now = new Date();\r\n        const data = JSON.parse(storage);\r\n\r\n        if(storage === null || now.getTime() > data.expiration ){\r\n\r\n            // If the item is expired, delete the item from storage\r\n            localStorage.removeItem('weatherResults');\r\n\r\n            await api.get(`https://api.hgbrasil.com/weather?format=json-cors&key=${key}&city_name=${city}`).then(data => {\r\n                setWeather(data.data.results);\r\n    \r\n                const storeResults = {\r\n                    value: data.data.results,\r\n                    expiration: now.getTime() + 900000,\r\n                    userCity: city\r\n                }\r\n    \r\n                localStorage.setItem('weatherResults', JSON.stringify(storeResults));\r\n    \r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else {\r\n            // If there is valid on localstorage, add it to the state\r\n           setWeather(data.value);\r\n        }\r\n\r\n      \r\n    }\r\n\r\n    const getStatesList = async () => {\r\n        await axios.get('https://servicodados.ibge.gov.br/api/v1/localidades/estados/').then(list => {\r\n            setStates(list.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        const getUserLocalization = async () => {\r\n            await axios.get('https://geolocation-db.com/json/.').then(data => {\r\n                const userCity = slugify(data.data.city);\r\n                getWeather(userCity);\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n       \r\n        getUserLocalization();\r\n\r\n    }, [])\r\n\r\n    const setTodaysWeatherIcon = (weatherFound) => {\r\n\r\n        \r\n        if(weatherFound.currently === 'dia'){\r\n            document.body.style.backgroundImage = 'linear-gradient(to right, #2B8DF0, #074C90)';\r\n        } else {\r\n            document.body.style.backgroundImage = 'linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(2,2,50,1) 19%, rgba(0,212,255,1) 100%)';\r\n        }\r\n\r\n        if(weatherFound.condition_slug === 'rain'){\r\n            return RainIcon;\r\n        }\r\n\r\n        if(weatherFound.condition_slug === 'clear_day'){\r\n            return SunIcon;\r\n        }\r\n\r\n        if(weatherFound.condition_slug === 'cloud' || weatherFound.condition_slug === 'cloudly_day'){\r\n            return CloudyDayIcon;\r\n        }\r\n\r\n        if(weatherFound.condition_slug === 'cloudly_night'){\r\n            return CloudyNightIcon;\r\n        }\r\n        \r\n    }\r\n\r\n    const setFutureWeatherIcon = (futureWeather) => {\r\n\r\n        if(futureWeather.condition === 'rain'){\r\n            return RainIcon;\r\n        }\r\n\r\n        if(futureWeather.condition === 'cloudly_day' || futureWeather.condition === 'cloud'){\r\n            return CloudyDayIcon;\r\n        }\r\n\r\n        if(futureWeather.condition === 'clear_day'){\r\n            return SunIcon;\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    const handleChanges = (ev) => {\r\n        console.log(ev.target.value);\r\n    }\r\n\r\n    const searchCity = async (ev) => {\r\n        ev.preventDefault();\r\n        const selectedCity = ev.target.cityNameInput.value;\r\n        const selectedState = (ev.target.stateSelected.value);\r\n        \r\n        if(selectedCity && selectedState !== null && selectedCity && selectedState !== undefined){\r\n\r\n            // If the item is expired, delete the item from storage\r\n            localStorage.removeItem('weatherResults');\r\n            const now = new Date();\r\n\r\n            await api.get(`https://api.hgbrasil.com/weather?format=json-cors&key=${key}&city_name=${selectedCity},${selectedState}`).then(data => {\r\n            setModalShow(false);\r\n            setWeather(data.data.results);\r\n    \r\n                const storeResults = {\r\n                    value: data.data.results,\r\n                    expiration: now.getTime() + 900000,\r\n                    userCity: selectedCity\r\n                }\r\n    \r\n                localStorage.setItem('weatherResults', JSON.stringify(storeResults));\r\n    \r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        } \r\n\r\n        \r\n    }\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Buscar pela cidade\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit = {searchCity}>\r\n                {states && (\r\n                <Form.Select id=\"stateSelected\" required = {true} aria-label=\"Default select example\" onChange = {handleChanges}>\r\n                <option>Selecione o estado</option>\r\n\r\n                {states.map(list => {\r\n                    return <option key = {list.id} value={list.sigla}> {list.sigla} </option>\r\n                })}\r\n                </Form.Select>  \r\n\r\n            )} <br/>\r\n\r\n        \r\n                <Form.Group required = {true} className=\"test\" controlId=\"cityNameInput\">\r\n                    <Form.Control type=\"text\" placeholder=\"Digite o nome da cidade\" />\r\n                </Form.Group> <br/>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Buscar\r\n                </Button>\r\n\r\n            </Form>\r\n            </Modal.Body>\r\n        \r\n          </Modal>\r\n        );\r\n      }\r\n      \r\n  \r\n    \r\n    return (\r\n\r\n       \r\n\r\n        <div className = \"container\"> <br/> <br/> \r\n\r\n       \r\n\r\n            {weatherFound ? (\r\n\r\n                <div>\r\n                     <City> {weatherFound.city} </City> \r\n\r\n<div>\r\n  <Degree> {weatherFound.temp}°C  <CurrentWheaterIcon alt = \"weather\" src = {setTodaysWeatherIcon(weatherFound)} height='50px' /> <br/> <br/></Degree> \r\n    \r\n    <div>\r\n        {weatherFound.currently === 'dia' ? <DayLabel/> : <NightLabel/> }\r\n        {weatherFound.condition_slug === 'rain' ? <RainLabel/> : ''}\r\n        {weatherFound.condition_slug === 'cloud' || weatherFound.condition_slug === 'cloudly_day' || weatherFound.condition_slug === 'cloudly_night' ? <CloudyLabel/> : ''}\r\n    </div>\r\n\r\n    \r\n\r\n \r\n\r\n\r\n\r\n<div style = {{textAlign: 'center'}}> <br/> <br/>\r\n\r\n    <Container>\r\n    <Row>\r\n\r\n        <Col>\r\n            <NextDaysWeather> <br/>\r\n                <DayOfWeek> {weatherFound.forecast[1].weekday} </DayOfWeek> \r\n                <DayOfMonth> {weatherFound.forecast[1].date} </DayOfMonth> <br/>\r\n                <img alt = \"weather\" src = {setFutureWeatherIcon(weatherFound.forecast[1])} height = '50px' /> \r\n                <MinAndMax> Max: {weatherFound.forecast[1].max}°C | Min {weatherFound.forecast[1].min}°C </MinAndMax>\r\n            </NextDaysWeather>\r\n        </Col>\r\n\r\n        <Col>\r\n        <NextDaysWeather> <br/>\r\n                <DayOfWeek> {weatherFound.forecast[2].weekday} </DayOfWeek> \r\n                <DayOfMonth> {weatherFound.forecast[2].date} </DayOfMonth> <br/>\r\n                <img alt = \"weather\" src = {setFutureWeatherIcon(weatherFound.forecast[2])} height = '50px' />\r\n                <MinAndMax> Max: {weatherFound.forecast[2].max}°C | Min {weatherFound.forecast[2].min}°C </MinAndMax>\r\n            </NextDaysWeather>\r\n        </Col>\r\n\r\n        <Col>\r\n        <NextDaysWeather> <br/>\r\n                <DayOfWeek> {weatherFound.forecast[3].weekday} </DayOfWeek> \r\n                <DayOfMonth> {weatherFound.forecast[3].date} </DayOfMonth> <br/>\r\n                <img alt = \"weather\" src = {setFutureWeatherIcon(weatherFound.forecast[3])} height = '50px' />\r\n                <MinAndMax> Max: {weatherFound.forecast[3].max}°C | Min {weatherFound.forecast[3].min}°C </MinAndMax>\r\n            </NextDaysWeather>\r\n        </Col>\r\n\r\n        <Col>\r\n        <NextDaysWeather> <br/>\r\n                <DayOfWeek> {weatherFound.forecast[4].weekday} </DayOfWeek> \r\n                <DayOfMonth> {weatherFound.forecast[4].date} </DayOfMonth> <br/>\r\n                <img alt = \"weather\" src = {setFutureWeatherIcon(weatherFound.forecast[4])} height = '50px' />\r\n                <MinAndMax> Max: {weatherFound.forecast[4].max}°C | Min {weatherFound.forecast[4].min}°C </MinAndMax>\r\n            </NextDaysWeather>\r\n        </Col>\r\n\r\n        <Col>\r\n        <NextDaysWeather> <br/>\r\n                <DayOfWeek> {weatherFound.forecast[5].weekday} </DayOfWeek> \r\n                <DayOfMonth> {weatherFound.forecast[5].date} </DayOfMonth> <br/>\r\n                <img alt = \"weather\" src = {setFutureWeatherIcon(weatherFound.forecast[5])} height = '50px' />\r\n                <MinAndMax> Max: {weatherFound.forecast[5].max}°C | Min {weatherFound.forecast[5].min}°C </MinAndMax>\r\n            </NextDaysWeather>\r\n        </Col>\r\n\r\n    </Row>\r\n    </Container>\r\n  </div>\r\n</div>\r\n                </div>\r\n                \r\n            ) : (\r\n                <h1>Loading</h1>\r\n            )}\r\n\r\n<br/>\r\n     <Button variant=\"primary\" onClick={()=>{ setModalShow(true); getStatesList()}} >\r\n        Buscar pela cidade\r\n      </Button>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Home from '../Components/Home';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <BrowserRouter >\r\n            <Switch>\r\n                <Route path = \"/\" exact component = {Home} />\r\n            </Switch>\r\n        </BrowserRouter >\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport Routes from './router/Routes';\r\n\r\nconst App = () => <Routes/>\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}